一、单一职责原则
一个类或一个函数只做一件事情


二、里氏替换原则
所有父类出现的地方，子类都可以替换


三、依赖倒置原则
面向接口编程


四、接口隔离原则
接口隔离原则是对接口进行规范约束，尽量使用多个专门的接口(专门的接口是指：提供给每个模块的都应该是单一的接口，提供给几个模块就应该有几个接口)，而不是建立一个庞大的臃肿的接口


五、迪米特原则
要求类与类之间尽可能没有耦合关系(低耦合)。
具体要求：
1.一个类应该对自己需要耦合或调用的类知道的最少(即提供方的public方法尽量少)。只需知道你(被耦合或调用的类)提供的public方法，至于你内部如何复杂和我没关系，我也不关心。
2.一个类只和朋友类交流，
朋友类定义：出现在成员变量，方法的输入输出参数中的类称为成员朋友类，而出现在方法内部的类不属于朋友类


六、开闭原则(最基础也是最核心的原则，前面五种原则都是开闭原则的具体形态)
(模块、抽象、类和方法等软件实体)对扩展开放，对修改关闭
扩展含义：(一般通过子类)扩展
修改含义：修改已有的代码

具体实现：一般通过子类扩展，通过覆写，不修改已有的代码，软件实体上层保持不变，这样风险小



专门例子讲解设计原则不太清晰，在实际运用或者具体大的例子中更能体现，所以在后续设计模式中会再次说明设计原则